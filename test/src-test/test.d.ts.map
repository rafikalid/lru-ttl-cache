{"version":3,"sources":["src-test/test.ts"],"names":[],"mappings":"","file":"test.d.ts","sourcesContent":["import {describe, it} from 'mocha';\r\nimport Assert from 'assert'\r\nimport LRU_TTL from '..';\r\n\r\ndescribe('Cache Test', function(){\r\n    var cache: LRU_TTL<any, any>;\r\n    this.beforeAll(function(){\r\n        cache= new LRU_TTL({\r\n            ttl: 20000,\r\n            max: 4\r\n        });\r\n    });\r\n    // this.beforeEach(function(){\r\n    //     cache.clearAll();\r\n    // });\r\n\r\n    describe('Check 1', function(){\r\n        it('should insert tree elements', function(){\r\n            cache.set('key1', 'value1')\r\n                .set('key2', 2)\r\n                .set(3, {value:1});\r\n            Assert.strictEqual(cache.size, 3);\r\n        });\r\n        it('Should returns 3', function(){\r\n            Assert.strictEqual(cache.get('key2'), 2);\r\n        });\r\n        it('Should returns \"value1\"', function(){\r\n            Assert.strictEqual(cache.get('key1'), 'value1');\r\n        });\r\n        it('Should returns obj', function(){\r\n            Assert.deepStrictEqual(cache.get(3), {value: 1});\r\n        });\r\n        // it('shoould remove items after 70 seconds', function(cb){\r\n        //     setTimeout(function(){\r\n        //         var error= null\r\n        //         try {\r\n        //             Assert.strictEqual(cache.size, 0);\r\n        //         } catch (err) {\r\n        //             error= err\r\n        //         }\r\n        //         cb(error);\r\n        //     }, 70000);\r\n        // });\r\n    });\r\n\r\n    describe('LRU', function(){\r\n        it('should keep last 4 elements only', function(){\r\n            cache.set('ky1', 'v');\r\n            cache.set('k2', 'v');\r\n            cache.set('ky3', 'v');\r\n            cache.set('ky4', 'v');\r\n            cache.set('ky5', 'v');\r\n            cache.set('ky6', 'v');\r\n            cache.set('ky7', 'v');\r\n            cache.set('ky8', 'v');\r\n            cache.set('ky9', 'v');\r\n            Assert.strictEqual(cache.size, cache.max);\r\n        });\r\n    })\r\n})"]}